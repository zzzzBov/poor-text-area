// =============================================================================
// mixins.less is a collection of all-purpose mixins
// =============================================================================

// =====================================
// variable declarations
// =====================================
@z-compiler: lessc;
@z-ie-classes: false;
@z-ie-hacks: false;
@z-output-clearfix: false;

.bg(@a, @b: X, ...) {
    /// This one requires a bit of explanation because it's easy to get confused
    /// 
    /// ~`...` evaluates JavaScript and sets the background-image property to
    /// the return value.
    ///
    /// "@{arguments}" uses LESS's variable interpolation to get the arguments
    /// of the mixin as a value within JavaScript. LESS tries to treat
    /// @arguments as an array, but unfortunately fails at correctly escaping
    /// each argument in the array. To get around this, @arguments is wrapped in
    /// double quotes to treat the entire contents as a string.
    ///
    /// DO NOT USE DOUBLE QUOTES WITH ANY ARGUMENT TO THIS MIXIN. IT WILL CAUSE
    /// THE JAVASCRIPT EVALUATION TO FAIL. INSTEAD, USE SINGLE QUOTES.
    ///
    /// .replace(/[\[\]]|\,\sX/g, '')
    ///
    /// sub patterns:
    ///     [                           matches characters in the set
    ///         \[                       - left square brace
    ///         \]                       - right square brace
    ///     ]
    ///     |                           OR
    ///     \,                          comma character
    ///     \s                          space character
    ///     X                           capital X character
    ///
    /// http://www.toekneestuck.com/blog/2012/05/15/less-css-arguments-variable/
    /// This removes square brackets from the arguments, and the trailing ", X"
    /// when a single argument is passed to the mixin.
    ///
    /// DO NOT USE SQUARE BRACES WITH ANY ARGUMENT TO THIS MIXIN. THEY WILL BE
    /// STRIPPED FROM THE RESULTANT VALUE.
    ///
    /// .split(/,(?!(?:[^()]*\([^()]*\))*[^(]*\))/)
    /// 
    /// sub patterns:
    ///    ,                            comma character
    ///    (?!                          negative lookahead
    ///        (?:                      non-capturing parenthesis
    ///            [^                   matches characters not in the set
    ///                (                 - left parenthesis
    ///                )                 - right parenthesis
    ///            ]
    ///            *                    repeat zero or more times
    ///            \(                   left parenthesis character
    ///            [^                   matches characters not in the set
    ///                (                 - left parenthesis
    ///                )                 - right parenthesis
    ///            ]
    ///            *                    repeat zero or more times
    ///            \)                   right parenthesis character
    ///        )
    ///        *                        repeat zero or more times
    ///        [^                       matches characters not in the set
    ///            (                     - left parenthesis
    ///        ]
    ///        *                        repeat zero or more times
    ///        \)                       right parenthesis character
    ///    )
    ///
    /// The objective of this fancy-shmancy regex is to split the string only on
    /// commas that aren't within parenthesis. The negative lookahead is
    /// intended to look for an unmatched closing parenthesis. This allows
    /// gradient declarations to take advantage of rgb(), rgba(), hsl(), and
    /// hsla(). It's very likely that there are bugs with this Regular
    /// Expression, so don't go crazy with nested parenthesis.
    ///
    /// AVOID USING PARENTHESIS WITHIN STRINGS AS THEY MAY BREAK COMMA
    /// DETECTION. PARENTHESIS FOR COLOR FUNCTIONS SHOULD BE FINE.
    /// 
    /// .map(...)
    /// map is used to make each argument use the appropriate browser prefix.
    /// 
    /// sub patterns (linear gradient):
    ///     ^                           the beginning of the string
    ///     \s                          space characters
    ///     *                           repeat zero or more times
    ///     l                           lowercase l character
    ///     g                           lowercase g character
    ///
    /// lg may be used to represent a linear-gradient style
    ///
    /// sub patterns (radial gradient):
    ///     ^                           the beginning of the string
    ///     \s                          space characters
    ///     *                           repeat zero or more times
    ///     r                           lowercase r character
    ///     g                           lowercase g character
    ///
    /// rg may be used to represent a radial-gradient style
    
    //webkit
    background-image:
        ~`"@{arguments}"
            .replace(/[\[\]]|\,\sX/g, '')
            .split(/,(?!(?:[^()]*\([^()]*\))*[^(]*\))/)
            .map(function (bg) {
                return (
                    bg.replace(/^\s*lg/, '-webkit-linear-gradient')
                        .replace(/^\s*rg/, '-webkit-radial-gradient')
                );
            }).join(', ')`;
    //moz
    background-image:
        ~`"@{arguments}"
            .replace(/[\[\]]|\,\sX/g, '')
            .split(/,(?!(?:[^()]*\([^()]*\))*[^(]*\))/)
            .map(function (bg) {
                return (
                    bg.replace(/^\s*lg/, '-moz-linear-gradient')
                        .replace(/^\s*rg/, '-moz-radial-gradient')
                );
            }).join(', ')`;
    //ms
    background-image:
        ~`"@{arguments}"
            .replace(/[\[\]]|\,\sX/g, '')
            .split(/,(?!(?:[^()]*\([^()]*\))*[^(]*\))/)
            .map(function (bg) {
                return (
                    bg.replace(/^\s*lg/, '-ms-linear-gradient')
                        .replace(/^\s*rg/, '-ms-radial-gradient')
                );
            }).join(', ')`;
    //o
    background-image:
        ~`"@{arguments}"
            .replace(/[\[\]]|\,\sX/g, '')
            .split(/,(?!(?:[^()]*\([^()]*\))*[^(]*\))/)
            .map(function (bg) {
                return (
                    bg.replace(/^\s*lg/, '-o-linear-gradient')
                        .replace(/^\s*rg/, '-o-radial-gradient')
                );
            }).join(', ')`;
    //standard
    background-image:
        ~`"@{arguments}"
            .replace(/[\[\]]|\,\sX/g, '')
            .split(/,(?!(?:[^()]*\([^()]*\))*[^(]*\))/)
            .map(function (bg) {
                return (
                    bg.replace(/^\s*lg/, 'linear-gradient')
                        .replace(/^\s*rg/, 'radial-gradient')
                );
            }).join(', ')`;
}

.background-size(@args) {
    -webkit-background-size: @args;
    -moz-background-size: @args;
    -o-background-size: @args;
    background-size: @args;
}

.border-radius(@args) {
    -webkit-border-radius: @args;
    -moz-border-radius: @args;
    -o-border-radius: @args;
    border-radius: @args;
}

.border-bottom-left-radius(@radius) {
    -webkit-border-bottom-left-radius: @radius;
    -moz-border-radius-bottomleft: @radius;
    -o-border-bottom-left-radius: @radius;
    border-bottom-left-radius: @radius;
}

.border-bottom-right-radius(@radius) {
    -webkit-border-bottom-right-radius: @radius;
    -moz-border-radius-bottomright: @radius;
    -o-border-bottom-right-radius: @radius;
    border-bottom-right-radius: @radius;
}

.border-top-left-radius(@radius) {
    -webkit-border-top-left-radius: @radius;
    -moz-border-radius-topleft: @radius;
    -o-border-top-left-radius: @radius;
    border-top-left-radius: @radius;
}

.border-top-right-radius(@radius) {
    -webkit-border-top-right-radius: @radius;
    -moz-border-radius-topright: @radius;
    -o-border-top-right-radius: @radius;
    border-top-right-radius: @radius;
}

.border-bottom-radius(@radius) {
    .border-bottom-left-radius(@radius);
    .border-bottom-right-radius(@radius);
}

.border-left-radius(@radius) {
    .border-bottom-left-radius(@radius);
    .border-top-left-radius(@radius);
}

.border-right-radius(@radius) {
    .border-bottom-right-radius(@radius);
    .border-top-right-radius(@radius);
}

.border-top-radius(@radius) {
    .border-top-left-radius(@radius);
    .border-top-right-radius(@radius);
}

.border-radius(@dir, @radius) {
    //an invalid direciton (@dir) may be used, such as "none" or "blank",
    //and this will prevent a compilation error from occurring
}

.border-radius(bottom, @radius) {
    .border-bottom-radius(@radius);
}

.border-radius(left, @radius) {
    .border-left-radius(@radius);
}

.border-radius(right, @radius) {
    .border-right-radius(@radius);
}

.border-radius(top, @radius) {
    .border-top-radius(@radius);
}

.border-image(@img) {
    -webkit-border-image: @img;
    -moz-border-image: @img;
    -o-border-image: @img;
    border-image: @img;
}

.box-sizing(@args) {
    -webkit-box-sizing: @args;
    -moz-box-sizing: @args;
    box-sizing: @args;
}

.box-shadow(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-box-shadow: @args;
    -moz-box-shadow: @args;
    -o-box-shadow: @args;
    box-shadow: @args;
}

.box-shadow(@args) when (@z-compiler = dotless) {
    -webkit-box-shadow: @args;
    -moz-box-shadow: @args;
    -o-box-shadow: @args;
    box-shadow: @args;
}

.box-shadow(@a, @b) when (@z-compiler = dotless) {
    .box-shadow(~"@{a}, @{b}");
}

.box-shadow(@a, @b, @c) when (@z-compiler = dotless) {
    .box-shadow(~"@{a}, @{b}, @{c}");
}

.box-shadow(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .box-shadow(~"@{a}, @{b}, @{c}, @{d}");
}

.clearfix() {
    zoom: 1;
    
    &:before,
    &:after {
        content: '';
        display: table;
    }
    &:after {
        clear: both;
    }
}

#z-clearfix() when (@z-output-clearfix) {
    //this is a workaround to be able to optionally output the ".clearfix" class
    @name: clearfix;
    .@{name} {
        .clearfix();
    }
}
#z-clearfix() when not (@z-output-clearfix) {
    //nothing
}
#z-clearfix;

.column-count(@count) {
    -webkit-column-count: @count;
    -moz-column-count: @count;
    column-count: @count;
}

.column-gap(@gap) {
    -webkit-column-gap: @gap;
    -moz-column-gap: @gap;
    column-gap: @gap;
}

.column-rule(@rule) {
    -webkit-column-rule: @rule;
    -moz-column-rule: @rule;
    column-rule: @rule;
}

.column-rule-color(@color) {
    -webkit-column-rule-color: @color;
    -moz-column-rule-color: @color;
    column-rule-color: @color;
}

.column-rule-style(@style) {
    -webkit-column-rule-style: @style;
    -moz-column-rule-style: @style;
    column-rule-style: @style;
}

.column-rule-width(@width) {
    -webkit-column-rule-width: @width;
    -moz-column-rule-width: @width;
    column-rule-width: @width;
}

.column-width(@width) {
    -webkit-column-width: @width;
    -moz-column-width: @width;
    column-width: @width;
}

.columns(@args) {
    -webkit-columns: @args;
    -moz-columns: @args;
    columns: @args;
}

.inline-block() {
	display: inline-block;
}

.inline-block() when (@z-ie-classes) {
    .lt-ie8 & {
        display: inline;
        zoom: 1;
    }
}

.inline-block() when (@z-ie-hacks) {
    *display: inline;
    *zoom: 1;
}

.linear-gradient(@a, @b: X, ...) when (@z-compiler = lessc) {
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    background-image: -webkit-linear-gradient(@args);
    background-image: -moz-linear-gradient(@args);
    background-image: -ms-linear-gradient(@args);
    background-image: -o-linear-gradient(@args);
    background-image: linear-gradient(@args);
}

.opacity(@opacity) {
    filter: ~"alpha(opacity=@{opacity})";
    opacity: @opacity / 100;
}

.overflow-x(@overflow) {
    -ms-overflow-x: @overflow;
    overflow-x: @overflow;
}

.overflow-y(@overflow) {
    -ms-overflow-y: @overflow;
    overflow-y: @overflow;
}

.placeholder(@color) {
    &:-webkit-input-placeholder {
        color: @color;
    }
    &:-moz-placeholder {
        color: @color;
    }
    &:-ms-input-placeholder {
        color: @color;
    }
}

.rotate(@angle) {
    .rotate(@angle, deg);
}

.rotate(@angle, deg) {
    @deg: 1deg * @angle;
    .transform(rotate(@deg));
}

.rotate(@angle, rad) {
    @deg: 180deg * @angle / 3.141592653589793;
    .rotate(@deg, deg);
}

.size(@width, @height) {
    height: @height;
    width: @width;
}

.square(@size) {
    .size(@size, @size);
}

.text-overflow(@overflow) {
    -ms-text-overflow: @overflow;
    text-overflow: @overflow;
}

.transform(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transform: @args;
    -moz-transform: @args;
    -o-transform: @args;
    transform: @args;
}

.transform(@args) when (@z-compiler = dotless) {
    -webkit-transform: @args;
    -moz-transform: @args;
    -ms-transform: @args;
    -o-transform: @args;
    transform: @args;
}

.transform(@a, @b) when (@z-compiler = dotless) {
    .transform(~"@{a}, @{b}");
}

.transform(@a, @b, @c) when (@z-compiler = dotless) {
    .transform(~"@{a}, @{b}");
}

.transform(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .transform(~"@{a}, @{b}, @{c}, @{d}");
}

.transform-origin(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transform-origin: @args;
    -moz-transform-origin: @args;
    -o-transform-origin: @args;
    transform-origin: @args;
}

.transform-origin(@args) when (@z-compiler = dotless) {
    -webkit-transform-origin: @args;
    -moz-transform-origin: @args;
    -ms-transform-origin: @args;
    -o-transform-origin: @args;
    transform-origin: @args;
}

.transform-origin(@a, @b) when (@z-compiler = dotless) {
    .transform-origin(~"@{a}, @{b}");
}

.transform-origin(@a, @b, @c) when (@z-compiler = dotless) {
    .transform-origin(~"@{a}, @{b}, @{c}");
}

.transform-origin(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .transform-origin(~"@{a}, @{b}, @{c}, @{d}");
}

.transition(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transition: @args;
    -moz-transition: @args;
    -o-transition: @args;
    transition: @args;
}

.transition(@args) when (@z-compiler = dotless) {
    -webkit-transition: @args;
    -moz-transition: @args;
    -o-transition: @args;
    transition: @args;
}

.transition(@a, @b) when (@z-compiler = dotless) {
    .transition(~"@{a}, @{b}");
}

.transition(@a, @b, @c) when (@z-compiler = dotless) {
    .transition(~"@{a}, @{b}, @{c}");
}

.transition(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .transition(~"@{a}, @{b}, @{c}, @{d}");
}

.transition-delay(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transition-delay: @args;
    -moz-transition-delay: @args;
    -o-transition-delay: @args;
    transition-delay: @args;
}

.transition-delay(@args) when (@z-compiler = dotless) {
    -webkit-transition-delay: @args;
    -moz-transition-delay: @args;
    -o-transition-delay: @args;
    transition-delay: @args;
}

.transition-delay(@a, @b) when (@z-compiler = dotless) {
    .transition-delay(~"@{a}, @{b}");
}

.transition-delay(@a, @b, @c) when (@z-compiler = dotless) {
    .transition-delay(~"@{a}, @{b}, @{c}");
}

.transition-delay(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .transition-delay(~"@{a}, @{b}, @{c}, @{d}");
}

.transition-duration(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transition-duration: @args;
    -moz-transition-duration: @args;
    -o-transition-duration: @args;
    transition-duration: @args;
}

.transition-duration(@args) when (@z-compiler = dotless) {
    -webkit-transition-duration: @args;
    -moz-transition-duration: @args;
    -o-transition-duration: @args;
    transition-duration: @args;
}

.transition-duration(@a, @b) when (@z-compiler = dotless) {
    .transition-duration(~"@{a}, @{b}");
}

.transition-duration(@a, @b, @c) when (@z-compiler = dotless) {
    .transition-duration(~"@{a}, @{b}, @{c}");
}

.transition-duration(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .transition-duration(~"@{a}, @{b}, @{c}, @{d}");
}

.transition-property(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transition-property: @args;
    -moz-transition-property: @args;
    -o-transition-property: @args;
    transition-property: @args;
}

.transition-property(@args) when (@z-compiler = dotless) {
    -webkit-transition-property: @args;
    -moz-transition-property: @args;
    -o-transition-property: @args;
    transition-property: @args;
}

.transition-property(@a, @b) when (@z-compiler = dotless) {
    .transition-property(~"@{a}, @{b}");
}

.transition-property(@a, @b, @c) when (@z-compiler = dotless) {
    .transition-property(~"@{a}, @{b}, @{c}");
}

.transition-property(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .transition-property(~"@{a}, @{b}, @{c}, @{d}");
}

.transition-timing-function(@a, @b: X, ...) when (@z-compiler = lessc) {
    //http://stackoverflow.com/a/13490523/497418
    @args: ~`"@{arguments}".replace(/[\[\]]|\,\sX/g, '')`;
    -webkit-transition-timing-function: @args;
    -moz-transition-timing-function: @args;
    -o-transition-timing-function: @args;
    transition-timing-function: @args;
}

.transition-timing-function(@args) when (@z-compiler = dotless) {
    -webkit-transition-timing-function: @args;
    -moz-transition-timing-function: @args;
    -o-transition-timing-function: @args;
    transition-timing-function: @args;
}

.transition-timing-function(@a, @b) when (@z-compiler = dotless) {
    .transition-timing-function(~"@{a}, @{b}");
}

.transition-timing-function(@a, @b, @c) when (@z-compiler = dotless) {
    .transition-timing-function(~"@{a}, @{b}, @{c}");
}

.transition-timing-function(@a, @b, @c, @d) when (@z-compiler = dotless) {
    .transition-timing-function(~"@{a}, @{b}, @{c}, @{d}");
}

.user-select(@selection) {
    -webkit-user-select: @selection;
    -moz-user-select: @selection;
    -ms-user-select: @selection;
    -o-user-select: @selection;
    user-select: @selection;
}

.word-wrap(@wrap) {
    -ms-word-wrap: @wrap;
    word-wrap: @wrap;
}